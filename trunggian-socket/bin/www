#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('trunggian-socket:server');
var http = require('http');
var fs = require('fs');
var path = require('path');
var socket = require('socket.io');
var db = require('../database/connection');
var cors = require('cors');
var user = require('../repository/user');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app, {
  cors: {
    origin: 'http://trunggian.test',
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true
  }
});

var io = socket(server);
io.use((socket, next) => {
  const authHeader = socket.handshake.auth.token; // Lấy token từ auth
  console.log(authHeader);
  
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return next(new Error('Authentication error'));
  }

  const token = authHeader.split(' ')[1]; // Tách lấy token
  // Thực hiện xác thực token tại đây
  user.checkUser(token).then(user => {
    if (!user) {
      return next(new Error('Invalid token'));
    }
    socket.user = user;
    next();
  }).catch(err => {
    console.log(err);
    return next(new Error('Invalid token'));
  });

  next(); // Xác thực thành công
});



const eventPath = path.join(__dirname, '../events');
const events = fs.readdirSync(eventPath);

io.on('connection', function (socket) {
  events.forEach((event) => {
    const eventName = event.split('.')[0];
    const eventHandler = require(path.join(eventPath, event));

    if (eventHandler[eventName]) {
      socket.on(eventName, (data) => {
        eventHandler[eventName](socket, data, socket.user);
      });
    } else {
      console.warn(`No handler found for event: ${eventName}`);
    }
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
